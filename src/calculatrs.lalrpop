use crate::ast;

grammar;

// Previous result

Previous: ast::Value<'input> = "_" => ast::Value::PreviousResult;

// Primitives

FloatFront: ast::Value<'input> = <r"(-)?[0-9]+\.[0-9]*(E(-)?[0-9]+)?"> => ast::Value::Float(<>);
FloatBack: ast::Value<'input> = <r"(-)?\.[0-9]+(E(-)?[0-9]+)?"> => ast::Value::Float(<>);
FloatIntMant: ast::Value<'input> = <r"(-)?[0-9]+E(-)?[0-9]+"> => ast::Value::Float(<>);
Float = { FloatFront, FloatBack, FloatIntMant };
IntDec: ast::Value<'input> = <s:r"(-)?[0-9]+"> => ast::Value::Int(<>);
IntHex: ast::Value<'input> = <s:r"0x[0-9A-Fa-f]+"> => ast::Value::Int(<>);
Int = { IntDec, IntHex };

Num = { Float, Int, Previous };

// Expressions

CastToInt: Box<ast::Expr<'input>> = "int" "(" <e:Expr> ")" =>
    Box::new(ast::Expr::IntCast{ expr: e });
CastToFloat: Box<ast::Expr<'input>> = "float" "(" <e:Expr> ")" =>
    Box::new(ast::Expr::FloatCast{ expr: e });

Term: Box<ast::Expr<'input>> = {
    Num => Box::new(ast::Expr::Value { val: <> }),
    "(" <Expr> ")",
    CastToInt,
    CastToFloat,
};

Tier<Op, NextTier>: Box<ast::Expr<'input>> = {
    <t:Tier<Op, NextTier>> <o:Op> <n:NextTier> =>
        Box::new(ast::Expr::BinOp{left: t, op: o, right: n}),
    NextTier,
};

ExprOp: ast::BinOp = {
    "+" => ast::BinOp::Add,
    "-" => ast::BinOp::Sub,
};

FactorOp: ast::BinOp = {
    "*" => ast::BinOp::Mul,
    "/" => ast::BinOp::Div,
    "<<" => ast::BinOp::ShiftLeft,
    ">>" => ast::BinOp::ShiftRight,
    "**" => ast::BinOp::Exp,
};

Factor = Tier<FactorOp, Term>;

pub Expr = Tier<ExprOp, Factor>;
